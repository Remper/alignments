/**
 * This class is generated by jOOQ
 */
package eu.fbk.fm.alignments.index.db.tables;


import eu.fbk.fm.alignments.index.db.Keys;
import eu.fbk.fm.alignments.index.db.Public;
import eu.fbk.fm.alignments.index.db.tables.records.KbIndexRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KbIndex extends TableImpl<KbIndexRecord> {

    private static final long serialVersionUID = -1042573490;

    /**
     * The reference instance of <code>public.kb_index</code>
     */
    public static final KbIndex KB_INDEX = new KbIndex();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KbIndexRecord> getRecordType() {
        return KbIndexRecord.class;
    }

    /**
     * The column <code>public.kb_index.kbid</code>.
     */
    public final TableField<KbIndexRecord, Long> KBID = createField("kbid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.kb_index.uri</code>.
     */
    public final TableField<KbIndexRecord, String> URI = createField("uri", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.kb_index</code> table reference
     */
    public KbIndex() {
        this("kb_index", null);
    }

    /**
     * Create an aliased <code>public.kb_index</code> table reference
     */
    public KbIndex(String alias) {
        this(alias, KB_INDEX);
    }

    private KbIndex(String alias, Table<KbIndexRecord> aliased) {
        this(alias, aliased, null);
    }

    private KbIndex(String alias, Table<KbIndexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<KbIndexRecord> getPrimaryKey() {
        return Keys.KB_INDEX_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<KbIndexRecord>> getKeys() {
        return Arrays.<UniqueKey<KbIndexRecord>>asList(Keys.KB_INDEX_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KbIndex as(String alias) {
        return new KbIndex(alias, this);
    }

    /**
     * Rename this table
     */
    public KbIndex rename(String name) {
        return new KbIndex(name, null);
    }
}
