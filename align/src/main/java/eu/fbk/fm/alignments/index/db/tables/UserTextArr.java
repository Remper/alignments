/**
 * This class is generated by jOOQ
 */
package eu.fbk.fm.alignments.index.db.tables;


import eu.fbk.fm.alignments.index.db.Keys;
import eu.fbk.fm.alignments.index.db.Public;
import eu.fbk.fm.alignments.index.db.tables.records.UserTextArrRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTextArr extends TableImpl<UserTextArrRecord> {

    private static final long serialVersionUID = 2072157874;

    /**
     * The reference instance of <code>public.user_text_arr</code>
     */
    public static final UserTextArr USER_TEXT_ARR = new UserTextArr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTextArrRecord> getRecordType() {
        return UserTextArrRecord.class;
    }

    /**
     * The column <code>public.user_text_arr.uid</code>.
     */
    public final TableField<UserTextArrRecord, Long> UID = createField("uid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_text_arr.lsa</code>.
     */
    public final TableField<UserTextArrRecord, Float[]> LSA = createField("lsa", org.jooq.impl.SQLDataType.REAL.getArrayDataType(), this, "");

    /**
     * Create a <code>public.user_text_arr</code> table reference
     */
    public UserTextArr() {
        this("user_text_arr", null);
    }

    /**
     * Create an aliased <code>public.user_text_arr</code> table reference
     */
    public UserTextArr(String alias) {
        this(alias, USER_TEXT_ARR);
    }

    private UserTextArr(String alias, Table<UserTextArrRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserTextArr(String alias, Table<UserTextArrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserTextArrRecord> getPrimaryKey() {
        return Keys.USER_TEXT_ARR_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserTextArrRecord>> getKeys() {
        return Arrays.<UniqueKey<UserTextArrRecord>>asList(Keys.USER_TEXT_ARR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTextArr as(String alias) {
        return new UserTextArr(alias, this);
    }

    /**
     * Rename this table
     */
    public UserTextArr rename(String name) {
        return new UserTextArr(name, null);
    }
}
