/**
 * This class is generated by jOOQ
 */
package eu.fbk.fm.alignments.index.db.udt.records;


import eu.fbk.fm.alignments.index.db.udt.Test;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRecord extends UDTRecordImpl<TestRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = 659767992;

    /**
     * Setter for <code>public.test.k</code>.
     */
    public void setK(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.test.k</code>.
     */
    public Integer getK() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.test.v</code>.
     */
    public void setV(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.test.v</code>.
     */
    public String getV() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Test.K;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Test.V;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getK();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getV();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value1(Integer value) {
        setK(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value2(String value) {
        setV(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Integer k, String v) {
        super(Test.TEST);

        set(0, k);
        set(1, v);
    }
}
