/**
 * This class is generated by jOOQ
 */
package eu.fbk.fm.alignments.index.db.tables;


import eu.fbk.fm.alignments.index.db.Keys;
import eu.fbk.fm.alignments.index.db.Public;
import eu.fbk.fm.alignments.index.db.tables.records.UserObjectsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserObjects extends TableImpl<UserObjectsRecord> {

    private static final long serialVersionUID = 1913266933;

    /**
     * The reference instance of <code>public.user_objects</code>
     */
    public static final UserObjects USER_OBJECTS = new UserObjects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserObjectsRecord> getRecordType() {
        return UserObjectsRecord.class;
    }

    /**
     * The column <code>public.user_objects.uid</code>.
     */
    public final TableField<UserObjectsRecord, Long> UID = createField("uid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_objects.object</code>.
     */
    public final TableField<UserObjectsRecord, Object> OBJECT = createField("object", org.jooq.impl.SQLDataType.OTHER.nullable(false), this, "");

    /**
     * Create a <code>public.user_objects</code> table reference
     */
    public UserObjects() {
        this("user_objects", null);
    }

    /**
     * Create an aliased <code>public.user_objects</code> table reference
     */
    public UserObjects(String alias) {
        this(alias, USER_OBJECTS);
    }

    private UserObjects(String alias, Table<UserObjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserObjects(String alias, Table<UserObjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserObjectsRecord> getPrimaryKey() {
        return Keys.USER_OBJECTS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserObjectsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserObjectsRecord>>asList(Keys.USER_OBJECTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserObjects as(String alias) {
        return new UserObjects(alias, this);
    }

    /**
     * Rename this table
     */
    public UserObjects rename(String name) {
        return new UserObjects(name, null);
    }
}
